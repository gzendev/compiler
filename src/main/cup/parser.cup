package unlam.compiler;

import java_cup.runtime.*;
import unlam.compiler.symboltable.*;
import unlam.compiler.symboltable.Symbol;
import java.util.List;
import java.util.ArrayList;
import unlam.compiler.terceto.Terceto;
import unlam.compiler.terceto.IntermediateCodeManager;
import unlam.compiler.terceto.CampoTerceto;

class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public ArrayList<String> varsList = new ArrayList();
     public IntermediateCodeManager intCodeManager = new IntermediateCodeManager();
     public String blockCondition = "IF";
:}
parser code
{:

    public List<Symbol> getSymbolsList() {
        return action_obj.symbolTableManager.getSymbolsList();
    }

    public List<Terceto> getTercetosList() {
        return action_obj.intCodeManager.getTercetosList();
    }

    public Integer crearTerceto(String operador, String operando1, String operando2)
    {
        return action_obj.intCodeManager.crearTerceto(operador, operando1, operando2);
    }

    public Integer crearTerceto(String valor)
    {
        return action_obj.intCodeManager.crearTerceto(valor);
    }

    public Integer crearTerceto(String operacion, String operando1)
    {
        return action_obj.intCodeManager.crearTerceto(operacion, operando1);
    }

    public void setPunteroTerceto(String puntero, Integer numeroTerceto)
    {
        action_obj.intCodeManager.setPunteroTerceto(puntero, numeroTerceto);
    }

    public Integer getNumeroTercetoFromPuntero(String puntero)
    {
        return action_obj.intCodeManager.getNumeroTercetoFromPuntero(puntero);
    }

    public String getStrNumeroTercetoFromPuntero(String puntero)
    {
        return action_obj.intCodeManager.getStrNumeroTercetoFromPuntero(puntero);
    }

    public void apilarPuntero(Integer puntero)
    {
        action_obj.intCodeManager.apilarPuntero(puntero);
    }

    public Integer desapilarPuntero()
    {
        return action_obj.intCodeManager.desapilarPuntero();
    }

    public void apilarLexema(String lexema)
    {
        action_obj.intCodeManager.apilarLexema(lexema);
    }

    public String desapilarLexema()
    {
        return action_obj.intCodeManager.desapilarLexema();
    }

    public void apilarComparador(String comparador)
    {
        action_obj.intCodeManager.apilarComparador(comparador);
    }

    public String desapilarComparador()
    {
        return action_obj.intCodeManager.desapilarComparador();
    }

    public Integer getUltimoNumeroTerceto()
    {
        return action_obj.intCodeManager.getUltimoNumeroTerceto();
    }

    public void actualizarTerceto(Integer numeroTerceto, CampoTerceto campo, String valor)
    {
        action_obj.intCodeManager.actualizarTerceto(numeroTerceto, campo, valor);
    }

    public Integer topePilaPunteros()
    {
        return action_obj.intCodeManager.topePilaPunteros();
    }

    public void apilarCondSufIf(Integer numIf, Integer puntero)
    {
        action_obj.intCodeManager.apilarCondSufIf(numIf, puntero);
    }

    public Integer desapilarCondSufIf(Integer numIf)
    {
        return action_obj.intCodeManager.desapilarCondSufIf(numIf);
    }

    public Boolean hayCondicionesSuficientesIf(Integer numIf)
    {
        return action_obj.intCodeManager.hayCondicionesSuficientesIf(numIf);
    }

    public void apilarCondSufWhile(Integer numWhile, Integer puntero)
    {
        action_obj.intCodeManager.apilarCondSufWhile(numWhile, puntero);
    }

    public Integer desapilarCondSufWhile(Integer numWhile)
    {
        return action_obj.intCodeManager.desapilarCondSufWhile(numWhile);
    }

    public Boolean hayCondicionesSuficientesWhile(Integer numWhile)
    {
        return action_obj.intCodeManager.hayCondicionesSuficientesWhile(numWhile);
    }

    public String getComparadorInverso(String comparador)
    {
        return action_obj.intCodeManager.getComparadorInverso(comparador);
    }

    public Boolean esOperacionEntreConstantes(String puntero1, String puntero2)
    {
        return action_obj.intCodeManager.esOperacionEntreConstantes(puntero1, puntero2);
    }

    public void eliminarTerceto(Integer numeroTerceto)
    {
        action_obj.intCodeManager.eliminarTerceto(numeroTerceto);
    }

    public Integer getCte(Integer numeroTerceto)
    {
        return action_obj.intCodeManager.getCte(numeroTerceto);
    }

    public void apilarIf()
    {
        action_obj.intCodeManager.apilarIf();
    }

    public Integer getNumeroIf()
    {
        return action_obj.intCodeManager.getNumeroIf();
    }

    public String getStrNumeroIf()
    {
        return action_obj.intCodeManager.getStrNumeroIf();
    }

    public Integer desapilarIf()
    {
        return action_obj.intCodeManager.desapilarIf();
    }

    public void apilarWhile()
    {
        action_obj.intCodeManager.apilarWhile();
    }

    public Integer getNumeroWhile()
    {
        return action_obj.intCodeManager.getNumeroWhile();
    }

    public String getStrNumeroWhile()
    {
        return action_obj.intCodeManager.getStrNumeroWhile();
    }

    public Integer desapilarWhile()
    {
        return action_obj.intCodeManager.desapilarWhile();
    }

    public void apilarCondSuf(Integer puntero)
    {
        if(action_obj.blockCondition.equals("IF"))
        {
            Integer numeroIf = getNumeroIf();
            apilarCondSufIf(numeroIf, puntero);
        }
        if(action_obj.blockCondition.equals("WHILE"))
        {
            Integer numeroWhile = getNumeroWhile();
            apilarCondSufWhile(numeroWhile, puntero);
        }
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal OP_MAY;
terminal OP_MEN;
terminal OP_IG;
terminal OP_MAYIG;
terminal OP_MENIG;
terminal AND;
terminal OR;
terminal NOT;
terminal DISTINCT;
terminal COMA;
terminal DOS_PUNTOS;
terminal PYC;
terminal CLOSE_CURLY;
terminal OPEN_CURLY;
terminal COR_A;
terminal COR_C;
terminal IF;
terminal ELSE;
terminal FOR;
terminal INIT;
terminal WRITE;
terminal READ;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal WHILE;
terminal REORDER, SLICEANDCONCAT;

// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal expression_list;
non terminal term;
non terminal factor;
non terminal conditional;
non terminal condition;
non terminal data;
non terminal vardeclaration;
non terminal declarationslist;
non terminal declaration;
non terminal varslist;
non terminal var;
non terminal vartype;
non terminal if_sentence;
non terminal functionsliceandconcat;
non terminal functionreorder;

// Start Symbol Definition
//start with sentence;   Cambio el StartSymbol para permitir entradas multilinea
start with program;

program ::= block  {:
    System.out.println("Program End");
    setPunteroTerceto("program", getNumeroTercetoFromPuntero("block"));
    intCodeManager.mostrarTercetos();
 :};

program ::= -1;

block ::= block sentence{: System.out.println("Block Sentence"); :};
block ::= sentence
{:
    System.out.println("Block");
    setPunteroTerceto("block", getNumeroTercetoFromPuntero("sentence"));
:};

sentence ::= assignment
{:
    System.out.println("Sentence");
    setPunteroTerceto("sentence", getNumeroTercetoFromPuntero("assignment"));
:};
assignment ::= IDENTIFIER:id ASSIG expression
{:
    System.out.println(id+" = Assignment");
    String strId = id.toString();
    symbolTableManager.checkVarIsNumeric(strId);
    //Integer numTercetoId = crearTerceto(strId);
    setPunteroTerceto("assignment",
        crearTerceto(":=", getStrNumeroTercetoFromPuntero("expression"),
        strId));
:};
assignment ::= IDENTIFIER:id ASSIG SUB INTEGER_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    integer = (-1) * integer;
    symbolTableManager.addSymbol("_-" + strConstant, integer);
    String strId = id.toString();
    symbolTableManager.checkVarIsInteger(strId);
    System.out.println(id+" = Constant assignment: " + constant);
    //Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(integer.toString());
    //setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), "#" + numTercetoId.toString()));
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), strId));
:};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant
{:
    String strConstant = constant.toString();
    symbolTableManager.addSymbol("_" + strConstant, strConstant);
    String strId = id.toString();
    symbolTableManager.checkVarIsString(strId);
    System.out.println(id+" = Constant assignment: " + constant);
    //Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(strConstant);
    //setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), "#" + numTercetoId.toString()));
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), strId));
:};
assignment ::= IDENTIFIER:id ASSIG SUB FLOAT_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Double float_value = Double.valueOf(strConstant);
    float_value = (-1) * float_value;
    symbolTableManager.addSymbol("_-" + strConstant, float_value);
    String strId = id.toString();
    symbolTableManager.checkVarIsFloat(strId);
    System.out.println(id+" = Float constant assignment: " + constant);
    //Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(float_value.toString());
    //setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), "#" + numTercetoId.toString()));
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), strId));
:};
assignment ::= IDENTIFIER:id ASSIG FLOAT_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    String strId = id.toString();
    symbolTableManager.checkVarIsFloat(strId);
    System.out.println(id+" = Float constant assignment: " + constant);
    //Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(strConstant);
    //setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), "#" + numTercetoId.toString()));
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoConstant.toString(), strId));
:};
expression_list ::= expression
{:
    System.out.println("expression_list = expression");
:};
expression_list ::= expression_list COMA expression {:
    System.out.println("expression_list = expression_list COMA expression");
:};
expression ::= expression PLUS term
{:
    System.out.println("+");
    if(esOperacionEntreConstantes("expression", "term")) //Constant folding
    {
        Integer resultado = getCte(getNumeroTercetoFromPuntero("expression")) + getCte(getNumeroTercetoFromPuntero("term"));
        System.out.println("Resultado = " + resultado);
        eliminarTerceto(getNumeroTercetoFromPuntero("term"));
        eliminarTerceto(getNumeroTercetoFromPuntero("expression"));
        symbolTableManager.addSymbol("_" + resultado.toString(), resultado);
        setPunteroTerceto("expression", crearTerceto(resultado.toString()));
    } else
    {
        setPunteroTerceto("expression",
        crearTerceto("+", getStrNumeroTercetoFromPuntero("expression"),
        getStrNumeroTercetoFromPuntero("term")));
    }
:};
expression ::= expression SUB term
{:
    System.out.println("-");
    if(esOperacionEntreConstantes("expression", "term")) //Constant folding
    {
        Integer resultado = getCte(getNumeroTercetoFromPuntero("expression")) - getCte(getNumeroTercetoFromPuntero("term"));
        System.out.println("Resultado = " + resultado);
        eliminarTerceto(getNumeroTercetoFromPuntero("term"));
        eliminarTerceto(getNumeroTercetoFromPuntero("expression"));
        symbolTableManager.addSymbol("_" + resultado.toString(), resultado);
        setPunteroTerceto("expression", crearTerceto(resultado.toString()));
    } else
    {
        setPunteroTerceto("expression",
        crearTerceto("-", getStrNumeroTercetoFromPuntero("expression"),
        getStrNumeroTercetoFromPuntero("term")));
    }
:};
expression ::= term
{:
    System.out.println("Expression = Term");
    setPunteroTerceto("expression", getNumeroTercetoFromPuntero("term"));
:};

// funcion slice and concat
expression ::= functionsliceandconcat
{: System.out.println("Expresion es Funcion SliceAndConcat "); :};

functionsliceandconcat
    ::= SLICEANDCONCAT OPEN_BRACKET INTEGER_CONSTANT COMA INTEGER_CONSTANT COMA STRING_CONSTANT COMA STRING_CONSTANT COMA INTEGER_CONSTANT CLOSE_BRACKET
        {: System.out.println("Función SliceAndConcat "); :};

term ::= term MULT factor
{:
    System.out.println("*");
    if(esOperacionEntreConstantes("term", "factor")) //Constant folding
    {
        Integer resultado = getCte(getNumeroTercetoFromPuntero("term")) * getCte(getNumeroTercetoFromPuntero("factor"));
        System.out.println("Resultado = " + resultado);
        eliminarTerceto(getNumeroTercetoFromPuntero("factor"));
        eliminarTerceto(getNumeroTercetoFromPuntero("term"));
        symbolTableManager.addSymbol("_" + resultado.toString(), resultado);
        setPunteroTerceto("term", crearTerceto(resultado.toString()));
    } else
    {
        setPunteroTerceto("term",
        crearTerceto("*", getStrNumeroTercetoFromPuntero("term"),
        getStrNumeroTercetoFromPuntero("factor")));
    }
:};
term ::= term DIV factor
{:
    System.out.println("/");
    if(esOperacionEntreConstantes("term", "factor")) //Constant folding
    {
        Integer resultado = getCte(getNumeroTercetoFromPuntero("term")) / getCte(getNumeroTercetoFromPuntero("factor"));
        System.out.println("Resultado " + getCte(getNumeroTercetoFromPuntero("term")) + "/" + getCte(getNumeroTercetoFromPuntero("factor")) + "= " + resultado);
        eliminarTerceto(getNumeroTercetoFromPuntero("factor"));
        eliminarTerceto(getNumeroTercetoFromPuntero("term"));
        symbolTableManager.addSymbol("_" + resultado.toString(), resultado);
        setPunteroTerceto("term", crearTerceto(resultado.toString()));
    } else
    {
        setPunteroTerceto("term",
        crearTerceto("/", getStrNumeroTercetoFromPuntero("term"),
        getStrNumeroTercetoFromPuntero("factor")));
    }
:};
term ::= factor
{:
    System.out.println("Term = factor");
    setPunteroTerceto("term", getNumeroTercetoFromPuntero("factor"));
:};
factor ::= IDENTIFIER:id
{:
    System.out.println("Id: " + id);
    String strId = id.toString();
    symbolTableManager.checkVarExists(strId);
    symbolTableManager.checkVarIsNumeric(strId);
    setPunteroTerceto("factor", crearTerceto(strId));
:};
factor ::= INTEGER_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + strConstant);
    setPunteroTerceto("factor", crearTerceto(strConstant));
:};
factor ::= OPEN_BRACKET
    {:
        apilarPuntero(getNumeroTercetoFromPuntero("term"));
        apilarPuntero(getNumeroTercetoFromPuntero("expression"));
    :}
    expression CLOSE_BRACKET
    {:
        System.out.println("Factor = (Expression)");
        setPunteroTerceto("factor", getNumeroTercetoFromPuntero("expression"));
        setPunteroTerceto("expression", desapilarPuntero());
        setPunteroTerceto("term", desapilarPuntero());
    :};

sentence ::= WRITE OPEN_BRACKET data CLOSE_BRACKET {:
    System.out.println("WRITE:");
    setPunteroTerceto("sentence",
    crearTerceto("WRITE", getStrNumeroTercetoFromPuntero("data")));
:};
data ::= INTEGER_CONSTANT:integer_constant
{:
    String strConstant = integer_constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + integer_constant);
    setPunteroTerceto("data", crearTerceto(strConstant));
:};
data ::= FLOAT_CONSTANT:float_constant
{:
    String strConstant = float_constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    System.out.println(" float: " + float_constant);
    setPunteroTerceto("data", crearTerceto(strConstant));
:};
data ::= STRING_CONSTANT:stringConstant
{:
    String strConstant = stringConstant.toString();
    symbolTableManager.addSymbol("_" + strConstant, strConstant);
    System.out.println("data as string data");
    setPunteroTerceto("data", crearTerceto(strConstant));
:};
data ::= IDENTIFIER:id
{:
    System.out.println(" id: " + id);
    String strId = id.toString();
    symbolTableManager.checkVarExists(strId);
    setPunteroTerceto("data", crearTerceto(strId));
:};

sentence ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
    String strId = id.toString();
    symbolTableManager.checkVarExists(strId);
    Integer numeroTercetoId = crearTerceto(strId);
    setPunteroTerceto("sentence",
    crearTerceto("READ", "#" + numeroTercetoId.toString()));
    System.out.println("READ: " + id);
:};

sentence ::= vardeclaration
{:
    System.out.println("Sentencia de declaracion de variables");
:};

vardeclaration ::= INIT OPEN_CURLY declarationslist CLOSE_CURLY
{:
    System.out.println("Declaracion de variables");
:};

declarationslist ::= declarationslist declaration
{:
    System.out.println("Lista de declaraciones");
:};

declarationslist ::= declaration
{:
    System.out.println("Declaracion");
:};

declaration ::= varslist DOS_PUNTOS vartype
{:
    System.out.println("Declaracion");
:};

varslist ::= varslist COMA var
{:
    System.out.println("Lista de variables");
:};

varslist ::= var
{:
    System.out.println("Variable");
:};

var ::= IDENTIFIER:id
{:
    symbolTableManager.checkVarDuplicated(id.toString());
    this.varsList.add(id.toString());
    System.out.println("Variable: " + id);
:};

vartype ::= INT
{:
    symbolTableManager.addVars(this.varsList, DataType.CTE_INTEGER);
    System.out.println("Entero");
:};

vartype ::= FLOAT
{:
    symbolTableManager.addVars(this.varsList, DataType.CTE_FLOAT);
    System.out.println("Flotante");
:};

vartype ::= STRING
{:
    symbolTableManager.addVars(this.varsList, DataType.CTE_STRING);
    System.out.println("Cadena");
:};
sentence ::= {:apilarIf(); blockCondition = "IF";:} if_sentence;

if_sentence ::= IF conditional OPEN_CURLY block CLOSE_CURLY
{:
    System.out.println("if");
    Integer numeroIf = getNumeroIf();
    Integer numeroTercetoFinIf = crearTerceto("ET_ENDIF" + getStrNumeroIf());
    while(hayCondicionesSuficientesIf(numeroIf))
    {
        actualizarTerceto(desapilarCondSufIf(numeroIf), CampoTerceto.SEGUNDO_ELEM, "#" + numeroTercetoFinIf.toString());
    }
    System.out.println("fin if");
    desapilarIf();
:};
if_sentence ::= IF conditional OPEN_CURLY block CLOSE_CURLY ELSE
{:
    //Integer numeroTercetoSalto = crearTerceto("BI", "_") + 1;
    Integer numeroIf = getNumeroIf();
    Integer numeroTercetoSalto = crearTerceto("BI", "_");
    Integer numeroTercetoComienzoElse = crearTerceto("ET_BEGINELSE" + getStrNumeroIf());
    apilarPuntero(numeroTercetoSalto);
    while(hayCondicionesSuficientesIf(numeroIf))
    {
        actualizarTerceto(desapilarCondSufIf(numeroIf), CampoTerceto.SEGUNDO_ELEM, "#" + numeroTercetoComienzoElse.toString());
    }
:} OPEN_CURLY block CLOSE_CURLY{:
    Integer numeroTercetoFinElse = crearTerceto("ET_ENDELSE" + getStrNumeroIf());
    actualizarTerceto(desapilarPuntero(), CampoTerceto.SEGUNDO_ELEM, "#" + numeroTercetoFinElse.toString());
    System.out.println("if");
    desapilarIf();
:};

sentence ::= WHILE
{:
        apilarWhile();
        apilarPuntero(crearTerceto("ET_BEGINWHILE" + getStrNumeroWhile()));
        blockCondition = "WHILE";
:}
    conditional OPEN_CURLY block CLOSE_CURLY
{:
    Integer numeroTercetoBI = crearTerceto("BI", "#" + desapilarPuntero().toString());
    Integer numeroTercetoSalto = crearTerceto("ET_ENDWHILE" + getStrNumeroWhile());
    Integer numeroWhile = getNumeroWhile();
    while(hayCondicionesSuficientesWhile(numeroWhile))
    {
        actualizarTerceto(desapilarCondSufWhile(numeroWhile), CampoTerceto.SEGUNDO_ELEM, "#" + numeroTercetoSalto.toString());
    }
    System.out.println("while");
    desapilarWhile();
:};

sentence ::= functionreorder
{: System.out.println("Función REORDER"); :};

functionreorder
    ::= REORDER OPEN_BRACKET COR_A expression_list COR_C COMA INTEGER_CONSTANT COMA INTEGER_CONSTANT CLOSE_BRACKET
        {: System.out.println("Función especial reorder "); :}
    ;

conditional ::= OPEN_BRACKET condition {:setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));:}
    AND condition CLOSE_BRACKET
    {:
        apilarCondSuf(desapilarPuntero());
        apilarCondSuf(desapilarPuntero());
        System.out.println("and conditional");
    :};
conditional ::= OPEN_BRACKET condition {:setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));:}
    OR condition CLOSE_BRACKET
    {:
        Integer numeroTercetoSegundaCondicion = desapilarPuntero();
        Integer numeroTercetoPrimeraCondicion = desapilarPuntero();
        actualizarTerceto(numeroTercetoPrimeraCondicion, CampoTerceto.SEGUNDO_ELEM, "#" + getNumeroTercetoFromPuntero("condition"));
        apilarCondSuf(numeroTercetoSegundaCondicion);
        System.out.println("or conditional");
    :};
conditional ::= OPEN_BRACKET NOT condition CLOSE_BRACKET {:
    apilarCondSuf(topePilaPunteros());
    actualizarTerceto(desapilarPuntero(), CampoTerceto.PRIMER_ELEM, getComparadorInverso(desapilarComparador()));
    System.out.println("single conditional  not");
:};
conditional ::= OPEN_BRACKET condition CLOSE_BRACKET {:
    System.out.println("single conditional");
    setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));
    apilarCondSuf(desapilarPuntero());
:};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} OP_IG factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BNE", "_"));
            apilarComparador("BNE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} DISTINCT factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BEQ", "_"));
            apilarComparador("BEQ");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} OP_MAY factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BLE", "_"));
            apilarComparador("BLE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} OP_MAYIG factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BLT", "_"));
            apilarComparador("BLT");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} OP_MEN factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BGE", "_"));
            apilarComparador("BGE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} OP_MENIG factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BGT", "_"));
            apilarComparador("BGT");
        :};